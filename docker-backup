#!/bin/bash

backup() {
    echo "[INFO] Backing up archive..."

    if rsync -av --remove-source-files "$archive" "$destination"; then
        return 0
    else
        return 1
    fi
}

checkDependencies() {
    dependencies=("docker" "rsync" "tar")

    for dep in "${dependencies[@]}"; do
        if [ ! "$(command -v "$dep")" ]; then
            fatal "[ERROR] Command $dep not installed."
        fi
    done

    if [ $EUID != 0 ]; then
        fatal "[ERROR] Sudo privileges required."
    fi
}

compress() {
    echo "[INFO] Compressing files and directories..."

    if tar -czvf "$archive" "$origin"; then
        return 0
    else
        return 1
    fi
}

fatal() {
    echo "$@" >&2
    kill -10 $proc
}

notify() {
    curl \
        -H "Title: ${HOSTNAME^}" \
        -d "$1" \
        "$notifyURL"
}

startContainers() {
    echo "[INFO] Starting containers..."

    if docker start $containers; then
        return 0
    else
        return 1
    fi
}

stopContainers() {
    echo "[INFO] Stopping containers..."

    if docker stop $containers; then
        return 0
    else
        return 1
    fi
}

usage() {
    cat <<-EOF
	Usage: docker-backup -o /path/to/origin -d /path/to/destination
        -o  Origin directory where your Docker bind mounts are located
        -d  Backup destination path. Remote paths are also valid (i.e. username@192.168.1.100:/path/to/destination)
        -h  Show this help message and exit
	EOF
}

proc=$$
trap 'exit 1' SIGUSR1

checkDependencies

while getopts 'd:o:h' arg; do
    case $arg in
        d)
            destination=$OPTARG
            ;;
        o)
            origin=$(sed 's![^/]$!&/!' <<< "$OPTARG")
            ;;
        h)
            usage
            exit 2
            ;;
        *)
            usage
            exit 2
            ;;
    esac
done

if [ -z "$origin" ]; then
    fatal "[ERROR] Origin path not provided."
elif [ -z "$destination" ]; then
    fatal "[ERROR] Destination path not provided."
fi

archive="/tmp/$HOSTNAME.tar.gz"
containers=$(docker ps -q)
notifyURL="http://ntfy.io/chronos"

if stopContainers; then
    echo
    if compress; then
        echo
        if backup; then
            echo
            if startContainers; then
                echo
                notify "$origin: Backup completed." 
            else
                echo
                fatal "[ERROR] Unable to start containers."
            fi
        else
            echo
            if startContainers; then
                echo
                notify "$origin: Backup failed." 
            else
                echo
                fatal "[ERROR] Unable to start containers."
            fi

            echo
            fatal "[ERROR] Backup failed."
        fi
    else
        echo
        if startContainers; then
            echo
            notify "$origin: Backup compression failed." 
        else
            echo
            fatal "[ERROR] Unable to start containers."
        fi

        echo
        fatal "[ERROR] Compression failed."
    fi
else
    echo
    fatal "[ERROR] Unable to stop containers."
fi
